{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(shinythemes)\nlibrary(R2jags)\nsetwd(\"C:/Users/donvd/_Laptop/ResMas/Conference/TquanT/Shiny/JamesSteinRemake/\")\nsource(\"functions.R\")\n\ndataOptions = lapply(1:4, `[`)\nnames(dataOptions) = c(\"Efron & Morris (1977)\",\n                       \"Olympics (2012 & 2016)\",\n                       \"Eredivisie (2015 - 2016)\",\n                       \"Simulate your own data!\")\nestOptions = lapply(1:2, `[`)\nnames(estOptions) = c(\"James Stein\", \"Hierarchical Bayes\")\n\nui = fluidPage(theme = shinytheme(\"simplex\"),\n               headerPanel(\"James Stein Estimator\"),\n               sidebarPanel(\n                 selectInput(inputId = \"data\", label = h3(\"Select Dataset\"),\n                             choices = dataOptions, selected = 1),\n                 selectInput(inputId = \"estimator\", label = h3(\"Select Estimator\"),\n                             choices = estOptions, selected = 1),\n                 # Number of samples\n                 conditionalPanel(\n                   condition = \"input.estimator == 2\",\n                   sliderInput(inputId = \"samples\", label = h3(\"Posterior Samples (1000 burn-in)\"),\n                                value = 4e3, min = 1e1, step = 1e1, max = 1e4)\n                 ),\n                 # sample months for eredivisie\n                 conditionalPanel(\n                   condition = \"input.data == 3\",\n                   sliderInput(inputId = \"sampleDate\", label = h3(\"Select months sampled\"),\n                               min = as.Date(\"20-08-2015\", format = \"%d-%m-%Y\"),\n                               max = as.Date(\"10-05-2016\", format = \"%d-%m-%Y\"),\n                               value = as.Date(\"01-09-2015\", format = \"%d-%m-%Y\"),\n                               timeFormat= \"%h\")\n                 ),\n                 # UI for simulating data\n                 conditionalPanel(\n                   condition = \"input.data == 4\",\n                   sliderInput(inputId = \"nBetween\", label = \"Choose the number of persons.\",\n                               min = 5, max = 5e2, value = 20),\n                   sliderInput(inputId = \"nWithin\", label = \"Choose the number of samples within persons.\",\n                               min = 5, max = 100, value = 10),\n                   sliderInput(inputId = \"groupDistVar\", label = \"Choose your groupDistVar\",\n                               min = .5, max = 10, value = 5, step = .5),\n                   sliderInput(inputId = \"grandVar\", label = \"Choose your population variance\",\n                               min = .5, max = 10, value = 1, step = .5))\n               ),\n               # Plots - Data description - Estimator description\n               mainPanel(\n                 conditionalPanel(\n                   condition=\"output.estimator == 2\",\n                   h4('Visible')\n                 ),\n                 tabsetPanel(\n                   tabPanel(\"Plots\",\n                            plotOutput(\"plot\"),\n                            tableOutput(\"table\")),\n                   tabPanel(\"Information about the dataset\",\n                            uiOutput(\"dataDescription\"),\n                            tableOutput(\"tableDescription\")\n                   ),\n                   tabPanel(\"Information about the estimator\",\n                            uiOutput(\"estDescription\"))\n                 )\n               )\n)\n\nserver = function(input, output) {\n\n  # get reactive arguments\n  uIn = reactive({\n\n    samples = input$samples\n\n        set.seed(1) # same results every time\n\n    # select function\n    shrinkFun = switch (input$estimator,\n                        \"1\" = JS.mean,\n                        \"2\" = hierarchicalBayes\n    )\n    # replace spaces in estimator name by line breaks\n    estName0 = names(estOptions)[as.integer(input$estimator)] # space separated\n    estName = gsub(\" \", \"\\n\", estName0) # line break separated\n    # data dependent plotting adjustments\n    plotTitle = ifelse(input$data == 4L, \"Simulated data\",\n                       names(dataOptions)[as.integer(input$data)])\n    axLabels = c(\"Mean\", estName, \"True\\nMean\")\n    # select data\n    if (input$data == 1L) {\n      dat = read.table(\"Datasets/EffronMorris.txt\", header = TRUE, sep = \",\")\n      obsMean = dat[, 2]\n      trueMean = dat[, 3]\n    } else if (input$data == 2L) {\n      dat = read.table(\"Datasets/Olympics2012.txt\", header = TRUE, sep = \" \")\n      obsMean = dat$Population.per.Medal2 #dat$Medals\n      dat2 = read.table(\"Datasets/Olympics2016.txt\", header = TRUE, sep = \" \")\n      trueMean = dat2$Population.per.Medal2 #dat$Medals\n      axLabels[c(1, 3)] = c(\"London\\n2012\", \"Rio\\nde Janeiro\\n2016\")\n    } else if (input$data == 3L) {\n      dat = read.table(\"Datasets/Eredivisie2015.txt\", header = TRUE, sep = \" \")\n      dat$Date = as.Date(dat$Date)\n      obsMean = calcPointsDate(dat, input$sampleDate)[3, ]\n      trueMean = calcPointsDate(dat, Sys.Date())[3, ]\n    } else { # input$data == 5L\n      x = genData(nBetween = input$nBetween, nWithin = input$nWithin,\n                  args1 = list(mean = 0, sd = input$grandVar),\n                  args2 = list(sd = input$groupDistVar))\n      obsMean = sapply(x$data, mean)\n      trueMean = x$mu\n    }\n\n    JS = shrinkFun(obsMean, samples)\n\n    # RMSE table\n    tb = matrix(c(RMSE(obsMean, trueMean), RMSE(JS, trueMean)), 2, 1,\n                dimnames = list(c(\"Observed Mean\", estName0),\n                                \"Root Mean Squared Error\"))\n    # return reactive output\n    return(list(obsMean = obsMean, JS = JS, trueMean = trueMean, tb = tb, plotTitle = plotTitle,\n                input = as.integer(input$data), estName = estName, axLabels = axLabels))\n  })\n\n  # make plots\n  output$plot = renderPlot({\n    if (!is.null(uIn()$JS)) {\n      par(las = 1, bty = \"n\", mar = c(5, 6, 4, 2) + .1)\n      shrinkagePlot(JS = uIn()$JS, Mu = uIn()$obsMean, trueMean = uIn()$trueMean,\n                    estName = uIn()$estName,\n                    pch = 19, lty = 2, yaxt = \"n\", type = \"b\", ylab = \"\", xlab = \"Estimate\",\n                    main = uIn()$plotTitle, ylim = c(0, 2),\n                    col = rainbow(length(uIn()$obsMean)))\n      axis(2, at = 2:0, labels = uIn()$axLabels, las = 1)\n    }\n  })\n\n  # RMSE table\n  output$table = renderTable({if (!is.null(uIn()$tb)) uIn()$tb},\n                             include.rownames=TRUE)\n\n  # small description of the data\n  output$dataDescription = renderUI({\n    switch(input$data,\n           \"1\" = includeMarkdown(\"Descriptions/Efron and Morris.Rmd\"),\n           \"2\" = includeMarkdown(\"Descriptions/Olympics.Rmd\"),\n           \"3\" = includeMarkdown(\"Descriptions/Eredivisie.Rmd\")\n    )\n  })\n\n  # tables of data description\n  output$tableDescription = renderTable({\n    switch(input$data,\n           \"1\" = NULL,\n           \"2\" = NULL,\n           \"3\" = eredivisieTable()\n    )\n  })\n\n  # small description of the estimator\n  output$estDescription = renderUI({\n    switch(input$estimator,\n           \"1\" = withMathJax(includeMarkdown(\"Descriptions/JamesStein.Rmd\")),\n           \"2\" = withMathJax(includeMarkdown(\"Descriptions/HierarchicalBayes.Rmd\"))\n    )\n  })\n}\n\n# run shiny app\nshinyApp(ui = ui, server = server)\n",
    "created" : 1479288477053.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "71|18|122|2|\n",
    "hash" : "4036015548",
    "id" : "F2A76FD4",
    "lastKnownWriteTime" : 1479296247,
    "last_content_update" : 1479296247834,
    "path" : "C:/Users/donvd/_Laptop/ResMas/Conference/TquanT/Shiny/JamesSteinRemake/shiny.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}